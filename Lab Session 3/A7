import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier


data = pd.read_excel("Judgment_Embeddings_InLegalBERT.xlsx")
features = data.drop(columns=["Label"])
labels = data["Label"]


X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42)


knn_model = KNeighborsClassifier(n_neighbors=3)
knn_model.fit(X_train, y_train)

predicted_labels = knn_model.predict(X_test)
print("Predicted Labels:", predicted_labels)


output:

Predicted Labels: [ 0  0  0  8  1  0  0  0  0  0  4  0  0  0  1  6  0  0  2  1  0  2  1  6
  0  0  1  0  0  0  1  2  2  0  9  0  1  2  0  0  0  2  0  0  1  0  1  0
  6  0  0  0  1  6  0  1  0  1  0  0  2  0  0  0  0  0  0  0  1  2  0  1
  0  0  0  0  0  0  0  1  0  0  0  1  1  4  1  0  0  0  1  6  0  2  1  0
  2  1  1  0  0  6  0  0  1 11  6  6  0  0  0  0  0  0  0  0  0  0  6  0
  1  6  0  0  0  2  0  0  0  6  0  1  9  6  2  0  0  0  0  1  0  0  1  0
  1  0  1  6  1  1  1  0  0  1  0  6  1  0  0  0  0  0  0  6  0  9  2  0
  1  0  6  0  0  2  0  2  2  0  6  0  0  0  0  0  0  0  0  0  5  0  2  0
  6  0  0  0  0  0  1  9  2  0  2  0  0 11  1  0  0  0  0  6  9  0  1  1
  0  0  0  0  0  6  0  0  0  1  0  1  0  6  0  1  0  0  0  0  0  0  6  1
  0  0  9  1  1  1  0  0  1  0  0  0  0  0  1  0  0  9  0  0  6  0  0  0
  0  0  0  6  2  0  0  0  0  0  1  1  0  2  9  0  1  0  6  6  0  0  0  1
  1  1  0  1  9  6  1  1  0  2  5  0  1  0  2  1  0  0  0  1  0  0  0  2
  0  0  0  1  2  0  0  6  0  1  0  0  0  0  0  1  0  1  9  0  2  2  0  1
  1  1  0  0  2  0  0  2  6  0  0  2  0  0  0  0  1  0  1  0  1  1  1  0
  0  0  0  0  0  0  1  2  0  0  1  1  0  0  0  0  1  0  1  1  0  0  8  0
  0  1  0  0  0  0  0  0  2  6  1  0  8  1  0  0  1  0  1  0  0  0  0  1
  2  0  0  0  2  1  0  0  6  0  0  0  0  0  0  9  0  1  0  1  0  6  6  1
  1  1  0  1  1  0  1  0  6  0  0  0  0  2  0  4  0  9  6  0  0  0  0  1
  0  2  0  0  1  0  0  1  6  6  0  0  6  0  1  1  0  0  0  0  0  9  1  0
  6  0  0  0  0  0  0  1  6  1  5  0  0  6  1  0  0  0  0  9  0  0  0  0
  6  6  0  0  0  1  0  0  0  0  0  0  1  0  1  0  1  1  0  0  0  0  0  0
  6  1 13  1  0  0  0  0  0  0  0  1  0  0  0  0  1  1  0  0  0  0  0  0
  0  0  0  8  6  0  1  0  0  0  8  0  0  0  2  6  0  0  0  0  0  1  0  0
  0  0  2  0  0  6  1  0  9  0  0  1  0  2  0  0  0  0  0  6  4  0  9  2
  0  0  2  2  6  0  0  1  2  0  0  0  0  1  0  0  1  0 10  2  0  1  0  0
  0  1  0  0  1  0  5  0  6  0  0  0  8  0  0  6  5  0  6  2  0  6  6  0
  0  0  6  1  0  1  0  1  0  1  1  0  0  0  1  6  2  0  5  2  0  0  0  0
  0  0  0  0  0  6  2  0  1  6  0  2  1  0  1  2  0  6  0  6  0  1  0  1
  1  2  0  0  0  0  6  0  0  0  0  0  1  0  0  6  6  0  0  1  2  1  2  4
  2  0  0  1  0  2  0  9  0  0  1  0  0  0  0  0  0  0  1  1  1  5  1  2
  0  1  6  2  6  0  9  0  0  2  0  6  1  0  0  0  1  0  5  0  0  0  0  9
  1  1  0  6  0  1  0  2  0  0  1  0  0  1  1  0  0  0  1  0  0  0  0  4
  0  0  9  6  1  0  0  0  0  0  1  6  0  6  6  0 11  2  0  0  2  0  2  0
  0  1  0  0  0  0  0  1  0  0  0  0  0  0  2  0  1  0  0  1  0  1  0  0
  9  2  0  1  0  1  0  1  6  0  0  1  1  0  0  0  0  2  0  9  0  0  6  0
  0  0  0  0  0  1  6  6  0  0  0  0  0  0  0  0  1  2  0  0  0  0  0  0
  1  0  0  0  9  0  0  0  0  0  5  0  1 11  0  1  2  0  0  0  0  0  0  0
  0  0  0  6  0  0  4  1  1  0  8  0  1  4  0  2  1  2  0  2  7  6  0  0
  1  0  0  6  0  0  0  0  8  0  9  0  0  6  1  0  9  1  1  1  9  0  0  0
  0  0  0  1  6  1  2  0  1]
