import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score

def load_data(file_path, sheet_name):
    """Loads data from an Excel file."""
    # Check if sheet_name is valid
    try:
        df = pd.read_excel(file_path, sheet_name=sheet_name)
    except ValueError:
        # If sheet name is invalid, print available sheets and raise error
        available_sheets = pd.ExcelFile(file_path).sheet_names
        print(f"Error: Sheet name '{sheet_name}' not found. Available sheets: {available_sheets}")
        raise
    return df

def calculate_metrics(actual, predicted):
    """Calculates evaluation metrics for model performance."""
    mse = mean_squared_error(actual, predicted)
    rmse = np.sqrt(mse)
    mape = np.mean(np.abs((actual - predicted) / actual)) * 100
    r2score = r2_score(actual, predicted)
    
    return mse, rmse, mape, r2score

def main():
    """Main function to execute the workflow."""
    file_path = "/content/Lab Session Data.xlsx"
    sheet_name = "IRCTC Stock Price" 
    
    df = load_data(file_path, sheet_name)
    # Print available columns to check if "Price" exists
    print("Available columns:", df.columns)
    
    # Access the actual and predicted columns using their correct names
    # Replace "Price" and "Open" with the actual column names if they are different
    actual = df["Price"]  
    predicted = df["Open"]  
    
    mse, rmse, mape, r2score = calculate_metrics(actual, predicted)
    
    print(f"Mean Squared Error (MSE): {mse:.2f}")
    print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
    print(f"Mean Absolute Percentage Error (MAPE): {mape:.2f}%")
    print(f"RÂ²-Score: {r2score:.2f}")

if __name__ == "__main__":
    main()
